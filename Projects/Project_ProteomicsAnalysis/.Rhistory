top_n(50) %>%
select('Gene Symbol', Spontaneous, PMA, CA, CH)
Top50_heatmap <- Top50_heatmap %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
# Turn into a gene expression matrix
geneExp_matrix <- as.matrix(Top50_heatmap)
# Find z-scores for each column
z_scores <- scale(geneExp_matrix)
heatmap(z_scores)
head(geneExp_matrix)
head(z_scores)
heatmap(geneExp_matrix,
Colv = NA,
#  Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
heatmap(geneExp_matrix,
# Colv = NA,
Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
heatmap(geneExp_matrix,
# Colv = NA,
# Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
heatmap(geneExp_matrix,
# Colv = NA,
# Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
heatmap(geneExp_matrix,
Colv = NA,
Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
ggplot(melt(z_scores), aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "X Coordinate", y = "Y Coordinate", title = "Example Heat Map")
heatmap.2(z_scores, dendrogram = 'none', col = cm.colors(256), key = TRUE, key.title = 'Z-score')
heatmap(geneExp_matrix,
Colv = NA,
Rowv = NA,
main="Heatmap of Top 20 Proteins by Total Abundance")
Top100_heatmap <- TETs_selected %>%
top_n(100) %>%
select('Gene Symbol', Spontaneous, PMA, CA, CH)
Top100_heatmap <- Top100_heatmap %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
# Turn into a gene expression matrix
geneExp_matrix <- as.matrix(Top100_heatmap)
# Find z-scores for each column
z_scores <- scale(geneExp_matrix)
heatmap(z_scores)
heatmap_unique_proteins <- unlist(Top100_unique_proteins, recursive = T)
heatmap_unique_proteins <- unlist(Top100_unique_proteins)
, recursive = T
heatmap_unique_proteins <- unlist(Top100_unique_proteins, recursive = T, na.rm = T)
heatmap_unique_proteins
heatmap_unique_proteins <- unlist(Top100_unique_proteins)
heatmap_unique_proteins
heatmap_unique_proteins <- unlist(Top100_unique_proteins, use.names = F)
heatmap_unique_proteins
heatmap_unique_proteins <- na.omit(heatmap_unique_proteins)
heatmap_unique_proteins
typeof(heatmap_unique_proteins)
class(heatmap_unique_proteins)
View(Spearmans_rows)
View(Spearmans)
heatmap_proteins_df <- TETs_selected[heatmap_unique_proteins,]
View(heatmap_proteins_df)
heatmap_proteins_df <- TETs_selected %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol") %>%
select(Spontaneous, PMA, CA, CH)
heatmap_proteins_df <- heatmap_proteins_df[shared_proteins,]
heatmap_proteins_df <- heatmap_proteins_df[heatmap_unique_proteins,]
heatmap_proteins_df
heatmap_proteins_matrix <- as.matrix(heatmap_proteins_df)
head(heatmap_proteins_matrix)
heatmap(heatmap_proteins_matrix,                                     # Draw heatmap with hclust dendrograms
Rowv = NA,
# Colv = NA,
main="Heatmap of Shared NET and TET \n Proteins by Abundance")
z_scores <- scale(heatmap_proteins_matrix)
heatmap(z_scores,                                     # Draw heatmap with hclust dendrograms
Rowv = NA,
Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
head(z_scores)
heatmap(z_scores,                                     # Draw heatmap with hclust dendrograms
Rowv = NA,
Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
heatmap(z_scores)
heatmap(z_scores,
#  Rowv = NA,
Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
heatmap(z_scores,
Rowv = NA,
# Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
# Generate a heatmap
heatmap(z_scores)
head(heatmap_unique_proteins)
str(heatmap_unique_proteins)
heatmap.2(z_scores, dendrogram = 'none', col = cm.colors(256), key = TRUE, key.title = 'Z-score')
legend(x="right", legend=c("min", "med", "max"),fill=heat.colors(3))
heatmap(z_scores,
Rowv = NA,
# Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
# Take the list of unique proteins from each condition we found from the Venn Diagram, omit the NA variables to get a single list of the proteins
antimicrobial <- c("GZMA",
"GZMH",
"LTF",
"CALR",
"ENO1",
"ANXA1",
"VTN",
"APOA1",
"SPTBN1",
"PRF1",
"CTSC",
"GNLY")
# We make the heatmap by using the abundance values. Here I'm selecting for the condition variables and observations of interest
heatmap_proteins_df <- TETs_selected %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol") %>%
select(Spontaneous, PMA, CA, CH)
heatmap_proteins_df <- heatmap_proteins_df[antimicrobial,]
head(heatmap_proteins_df)
# Change df into a matrix
heatmap_proteins_matrix <- as.matrix(heatmap_proteins_df)
# Graph on a comparable scale by computing z-scores
z_scores <- scale(heatmap_proteins_matrix)
head(z_scores)
# Generate a heatmap--you can adjust this however you like
heatmap(z_scores)
View(TETs_selected)
# Select Gene Symbol & Abundances from each sample for analysis
TETs_selected <- TETs %>%
select('Gene Symbol', starts_with("Abundances (Grouped):")) %>%
select(-c("Abundances (Grouped): E1", "Abundances (Grouped): E2", "Abundances (Grouped): E3"))
# Select Gene Symbol & Abundances from each sample for analysis
TETs_selected <- TETs %>%
select('Gene Symbol', starts_with("Abundances (Grouped):"))
#It's also important to remember to omit the Gene Symbol rows with NA
TETs_selected <- TETs_selected %>%
drop_na('Gene Symbol')
# Rename the columns so they're easier to work with
columns <- c("T1", "T2", "T3",
"T4", "T5", "T6",
"T7", "T8", "T9",
"T10", "T11", "T12")
colnames(TETs_selected)[2:13] <- columns
colnames(TETs_selected)
# Select Gene Symbol & Abundances from each sample for analysis
TETs_selected <- TETs %>%
select('Gene Symbol', starts_with("Abundances (Grouped):"))
#It's also important to remember to omit the Gene Symbol rows with NA
TETs_selected <- TETs_selected %>%
drop_na('Gene Symbol')
# Select Gene Symbol & Abundances from each sample for analysis
TETs_selected <- TETs %>%
select('Gene Symbol', starts_with("Abundances (Grouped):"))
#It's also important to remember to omit the Gene Symbol rows with NA
TETs_selected <- TETs_selected %>%
drop_na('Gene Symbol')
# Rename the columns so they're easier to work with
columns <- c("T1", "T2", "T3",
"T4", "T5", "T6",
"T7", "T8", "T9",
"T10", "T11", "T12")
colnames(TETs_selected)[2:13] <- columns
colnames(TETs_selected)
# Find the average abundances for each group
TETs_selected <- TETs_selected %>%
mutate(
Spontaneous = rowMeans(pick(2:4), na.rm = T),
PMA = rowMeans(pick(5:7), na.rm = T),
CA = rowMeans(pick(8:10), na.rm = T),
CH = rowMeans(pick(11:13), na.rm = T)
)
TETs_selected %>% head(10)
View(TETs_selected)
# Filter out the Gene Symbols where it's NA across all conditions
TETs_selected <- TETs_selected %>%
filter(!(is.na(Spontaneous) & is.na(PMA) & is.na(CA) & is.na(CH)))
# Get the total protein abundances across the averaged samples
TETs_selected$Total <- rowSums(TETs_selected[,14:17])
TETs_selected %>% head(10)
# Arrange the total by descending order
TETs_selected <- TETs_selected %>%
arrange(desc(Total))
# Take the list of unique proteins from each condition we found from the Venn Diagram, omit the NA variables to get a single list of the proteins
antimicrobial <- c("GZMA",
"GZMH",
"LTF",
"CALR",
"ENO1",
"ANXA1",
"VTN",
"APOA1",
"SPTBN1",
"PRF1",
"CTSC",
"GNLY")
# We make the heatmap by using the abundance values. Here I'm selecting for the condition variables and observations of interest
heatmap_proteins_df <- TETs_selected %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol") %>%
select(Spontaneous, PMA, CA, CH)
head(heatmap_proteins_df)
View(heatmap_proteins_df)
heatmap_proteins_df <- heatmap_proteins_df[antimicrobial,]
head(heatmap_proteins_df)
# Change df into a matrix
heatmap_proteins_matrix <- as.matrix(heatmap_proteins_df)
# Graph on a comparable scale by computing z-scores
z_scores <- scale(heatmap_proteins_matrix)
head(z_scores)
View(z_scores)
# Graph on a comparable scale by computing z-scores
z_scores <- scale(heatmap_proteins_df)
# Generate a heatmap--you can adjust this however you like
heatmap(z_scores)
# Take the list of unique proteins from each condition we found from the Venn Diagram, omit the NA variables to get a single list of the proteins
heatmap_unique_proteins <- unlist(Top100_unique_proteins, use.names = F)
heatmap_unique_proteins <- na.omit(heatmap_unique_proteins)
str(heatmap_unique_proteins)
# We make the heatmap by using the abundance values. Here I'm selecting for the condition variables and observations of interest
heatmap_proteins_df <- TETs_selected %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol") %>%
select(Spontaneous, PMA, CA, CH)
heatmap_proteins_df <- heatmap_proteins_df[heatmap_unique_proteins,]
head(heatmap_proteins_df)
# Change df into a matrix
heatmap_proteins_matrix <- as.matrix(heatmap_proteins_df)
# Graph on a comparable scale by computing z-scores
z_scores <- scale(heatmap_proteins_matrix)
head(z_scores)
# Generate a heatmap--you can adjust this however you like
heatmap(z_scores)
heatmap(z_scores,
Rowv = NA,
# Colv = NA,
main="Heatmap of Top Unique Proteins by Abundance")
ibrary(edgeR)
library(edgeR)
library(EnhancedVolcano)
library(ggrepel)
volcano_columns <- c("Unstim_G1_1", "Unstim_G1_2", "Unstim_G1_3",
"PMA_G2_1", "PMA_G2_2", "PMA_G2_3",
"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"))
View(TETs_Volano)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', -c("Spontaneous", "PMA", "CA", "CH", "Total"))
View(TETs_Volano)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', -c("Spontaneous", "PMA", "CA", "CH", "Total"))
View(TETs_Volano)
View(TETs_selected)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total)
View(TETs_Volano)
colnames(TETs_Volcano)[2:13] <- volcano_columns
volcano_columns <- c("Unstim_G1_1", "Unstim_G1_2", "Unstim_G1_3",
"PMA_G2_1", "PMA_G2_2", "PMA_G2_3",
"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total)
colnames(TETs_Volcano)[2:13] <- volcano_columns
colnames(TETs_Volcano)
d <- DGEList(counts = TETs_Volcano[,2:13],
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)),
genes = TETs_Volcano[,1])
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total) %>%
na.omit()
d <- DGEList(counts = TETs_Volcano[,2:13],
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)),
genes = TETs_Volcano[,1])
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
d <- estimateTagwiseDisp(d)
d <- estimateTrendedDisp(d)
Unstim_CH <- exactTest(d, pair=c("G1", "G4"), dispersion = "tagwise")
Unstim_CH_df <- as.data.frame(Unstim_CH)
head(Unstim_CH_df)
Unstim_CH_df_rownames <- Unstim_CH_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
EnhancedVolcano(Unstim_CH_df_rownames,
lab = rownames(Unstim_CH_df_rownames),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH-induced TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
View(process_column)
View(d)
typeof(d)
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c("var1", "var2"), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = 'var1 vs. var2 TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano <- Volcano_plot(d, G1, G4)
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = 'var1 vs. var2 TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, G1, G4)
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G2")
Spon_CH_Volcano
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = ''var1' vs. 'var2' TETs',
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = '[var1] vs. [var2] TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G2")
Spon_CH_Volcano
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
return(comparison_df_final)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano
head(Spon_CH_Volcano)
EnhancedVolcano(Spon_CH_Volcano,
lab = rownames(Spon_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
PMA_CH_Volcano <- Volcano_plot(d, "G2", "G4")
CA_CH_Volcano <- Volcano_plot(d, "G3", "G4")
Spon_PMA_Volcano <- Volcano_plot(d, "G1", "G2")
EnhancedVolcano(PMA_CH_Volcano,
lab = rownames(PMA_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'PMA vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
EnhancedVolcano(Spon_PMA_Volcano,
lab = rownames(Spon_PMA_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spon vs. PMA TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
EnhancedVolcano(CA_CH_Volcano,
lab = rownames(CA_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spon vs. PMA TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
View(Top100_heatmap)
TETs %>% head(5)
sum(is.na(TETs))
summary(is.na(TETs))
summ(is.na(TETs))
str(heatmap_unique_proteins)
view(shared_proteins_PMA_CH)
names(TETs)
setwd("~/Documents/GitHub/MolecularBiologyProjects/Projects/Project_ProteomicsAnalysis")
