"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"))
View(TETs_Volano)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', -c("Spontaneous", "PMA", "CA", "CH", "Total"))
View(TETs_Volano)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', -c("Spontaneous", "PMA", "CA", "CH", "Total"))
View(TETs_Volano)
View(TETs_selected)
TETs_Volano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total)
View(TETs_Volano)
colnames(TETs_Volcano)[2:13] <- volcano_columns
volcano_columns <- c("Unstim_G1_1", "Unstim_G1_2", "Unstim_G1_3",
"PMA_G2_1", "PMA_G2_2", "PMA_G2_3",
"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total)
colnames(TETs_Volcano)[2:13] <- volcano_columns
colnames(TETs_Volcano)
d <- DGEList(counts = TETs_Volcano[,2:13],
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)),
genes = TETs_Volcano[,1])
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total) %>%
na.omit()
d <- DGEList(counts = TETs_Volcano[,2:13],
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)),
genes = TETs_Volcano[,1])
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
d <- estimateTagwiseDisp(d)
d <- estimateTrendedDisp(d)
Unstim_CH <- exactTest(d, pair=c("G1", "G4"), dispersion = "tagwise")
Unstim_CH_df <- as.data.frame(Unstim_CH)
head(Unstim_CH_df)
Unstim_CH_df_rownames <- Unstim_CH_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
EnhancedVolcano(Unstim_CH_df_rownames,
lab = rownames(Unstim_CH_df_rownames),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH-induced TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
View(process_column)
View(d)
typeof(d)
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c("var1", "var2"), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = 'var1 vs. var2 TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano <- Volcano_plot(d, G1, G4)
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = 'var1 vs. var2 TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, G1, G4)
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G2")
Spon_CH_Volcano
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = ''var1' vs. 'var2' TETs',
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
volcano <- EnhancedVolcano(comparison_df_final,
lab = rownames(comparison_df_final),
x = 'logFC',
y = 'PValue',
title = '[var1] vs. [var2] TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
return(volcano)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G2")
Spon_CH_Volcano
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
return(comparison_df_final)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
Spon_CH_Volcano
head(Spon_CH_Volcano)
EnhancedVolcano(Spon_CH_Volcano,
lab = rownames(Spon_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
PMA_CH_Volcano <- Volcano_plot(d, "G2", "G4")
CA_CH_Volcano <- Volcano_plot(d, "G3", "G4")
Spon_PMA_Volcano <- Volcano_plot(d, "G1", "G2")
EnhancedVolcano(PMA_CH_Volcano,
lab = rownames(PMA_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'PMA vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
EnhancedVolcano(Spon_PMA_Volcano,
lab = rownames(Spon_PMA_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spon vs. PMA TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
EnhancedVolcano(CA_CH_Volcano,
lab = rownames(CA_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spon vs. PMA TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
View(Top100_heatmap)
TETs %>% head(5)
sum(is.na(TETs))
summary(is.na(TETs))
summ(is.na(TETs))
str(heatmap_unique_proteins)
view(shared_proteins_PMA_CH)
names(TETs)
setwd("~/Documents/GitHub/MolecularBiologyProjects/Projects/Project_ProteomicsAnalysis")
# Chunk 1: setup
library(tidyverse)
library(writexl)
library(readxl)
setwd("~/Documents/GitHub/MolecularBiologyProjects/Projects/Project_ProteomicsAnalysis")
TETs <- read_excel("/Users/tamto/Desktop/Proteomics/TETs_Data.xlsx")
# str(TETs)
# TETs %>% head(5)
# names(TETs)
sum(is.na(TETs))
# Chunk 2: Select and Clean the data
# Select Gene Symbol & Abundances from each sample for analysis
TETs_selected <- TETs %>%
select('Gene Symbol', starts_with("Abundances (Grouped):"))
#It's also important to remember to omit the Gene Symbol rows with NA
TETs_selected <- TETs_selected %>%
drop_na('Gene Symbol')
# Rename the columns so they're easier to work with
columns <- c("T1", "T2", "T3",
"T4", "T5", "T6",
"T7", "T8", "T9",
"T10", "T11", "T12")
colnames(TETs_selected)[2:13] <- columns
colnames(TETs_selected)
# Chunk 3: Mean and Total Abundances
# Find the average abundances for each group
TETs_selected <- TETs_selected %>%
mutate(
Spontaneous = rowMeans(pick(2:4), na.rm = T),
PMA = rowMeans(pick(5:7), na.rm = T),
CA = rowMeans(pick(8:10), na.rm = T),
CH = rowMeans(pick(11:13), na.rm = T)
)
# TETs_selected %>% head(5)
# Filter out the Gene Symbols where it's NA across all conditions
TETs_selected <- TETs_selected %>%
filter(!(is.na(Spontaneous) & is.na(PMA) & is.na(CA) & is.na(CH)))
# Get the total protein abundances across the averaged samples
TETs_selected$Total <- rowSums(TETs_selected[,14:17])
# TETs_selected %>% head(10)
# Arrange the total by descending order
TETs_selected <- TETs_selected %>%
arrange(desc(Total))
# Saving here!
# write_xlsx(TETs_selected,"Total_TETs_Abundances.xlsx")
# Chunk 4: Spearmans Correlation Heatmap
library(heatmaply)
library(dendextend)
# Select the condition variables and omit all genes where there is NA--this is because Spearman's correlation compares values (i.e. protein abundances) present in ALL conditions
Spearmans <- TETs_selected %>%
select('Gene Symbol', Spontaneous, PMA, CA, CH) %>%
na.omit()
# Change the Gene Symbol column to be the rownames
Spearmans_rows <- Spearmans %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
# Create correlation matrix using Spearman's method
cor_matrix <- cor(Spearmans_rows, method = "spearman")
# Make the heatmap
heatmaply(cor_matrix,
colors = colorRampPalette(c("blue", "white", "red")),
width = 700,
height = 700,
fontsize_row = 12,
fontsize_col = 12,
main = "Spearman Correlation Heatmap")
# Chunk 5: Venn Diagram of Top 100 Proteins by Abundance
process_column <- function(df, column_name) {
result <- df %>%
select('Gene Symbol', {{ column_name }}) %>%
arrange(desc({{ column_name }})) %>%
top_n(100) %>%
select(-{{ column_name }}) %>%
rename({{ column_name }} := 'Gene Symbol')
return(result)
}
Spontaneous_Top100 <- process_column(TETs_selected, Spontaneous)
PMA_Top100 <- process_column(TETs_selected, PMA)
CA_Top100 <- process_column(TETs_selected, CA)
CH_Top100 <- process_column(TETs_selected, CH)
# Combine each list into one data frame
Top100_by_Abundance <- cbind(Spontaneous_Top100, PMA_Top100, CA_Top100, CH_Top100)
# Create the Venn Diagram and customize the color palette!
library(VennDiagram)
library(RColorBrewer)
myCol <- brewer.pal(4, "Pastel1")
venn.diagram(
x = Top100_by_Abundance,
filename = "TETsTop100_VennDiagram.png", # saving it to my directory
fill = myCol,
fontface = "bold",
cat.fontface = "bold",
output = T,
imagetype = "png",
cat.fontfamily = "sans",
)
# Chunk 6
knitr::include_graphics("~/Documents/GitHub/MolecularBiologyProjects/Projects/Project_ProteomicsAnalysis/TETsTop100_VennDiagram.png")
# Chunk 7: Unique Top 100 Proteins by Abundance
# Here I'm creating a function for taking the column of interest and comparing its protein list with the proteins in the other columns to select for the unique IDs.
find_distinct_values <- function(df, target_column, comparison_columns) {
distinct_values <- df[[target_column]][!(df[[target_column]] %in% unlist(df[comparison_columns]))]
return(distinct_values)
}
distinct_Spon <- find_distinct_values(Top100_by_Abundance, "Spontaneous", c("PMA", "CA", "CH"))
distinct_PMA <- find_distinct_values(Top100_by_Abundance, "PMA", c("Spontaneous", "CA", "CH"))
distinct_CA <- find_distinct_values(Top100_by_Abundance, "CA", c("Spontaneous", "PMA", "CH"))
distinct_CH <- find_distinct_values(Top100_by_Abundance, "CH", c("Spontaneous", "PMA", "CA"))
# Chunk 8: Shared Proteins
find_shared_proteins <- function(df, A, B, C, D) {
shared_proteins <- intersect(df[[A]], df[[B]])
not_in_others <- setdiff(shared_proteins, union(df[[C]], df[[D]]))
return(not_in_others)
}
# For example, finding similar proteins between CH and PMA conditions.
shared_proteins_PMA_CH <- find_shared_proteins(Top100_by_Abundance, "PMA", "CH", "Spontaneous", "CA")
# view(shared_proteins_PMA_CH)
# Chunk 9: Unique Top 100 Proteins by Abundance Cont.
max_length <- max(length(distinct_CA), length(distinct_CH), length(distinct_PMA), length(distinct_Spon))
length(distinct_CA) <- max_length
length(distinct_CH) <- max_length
length(distinct_PMA) <- max_length
length(distinct_Spon) <- max_length
Top100_unique_proteins <- cbind(distinct_Spon, distinct_PMA, distinct_CA, distinct_CH)
Top100_unique_proteins <- as.data.frame(Top100_unique_proteins)
# Top100_unique_proteins %>% head(5)
# write_xlsx(Top100_unique_proteins,"Top100_Unique_Proteins.xlsx")
# Chunk 11: Volcano Plot Setup
library(edgeR)
library(EnhancedVolcano)
library(ggrepel)
# Here I am renaming with G1, G2, G3, G4 to define each condition
volcano_columns <- c("Unstim_G1_1", "Unstim_G1_2", "Unstim_G1_3",
"PMA_G2_1", "PMA_G2_2", "PMA_G2_3",
"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
# Select for the rows and rename the columns
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total) %>%
na.omit()
colnames(TETs_Volcano)[2:13] <- volcano_columns
colnames(TETs_Volcano)
# Compute differential gene expression list that has log2FC and p-values.
d <- DGEList(counts = TETs_Volcano[,2:13], # selecting replicate columns
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)), # define the groups and how many replicates (3)
genes = TETs_Volcano[,1]) # define the genes as the first column 'Gene Symbol'
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
d <- estimateTagwiseDisp(d)
d <- estimateTrendedDisp(d)
# Chunk 12: Volcano function
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
return(comparison_df_final)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
PMA_CH_Volcano <- Volcano_plot(d, "G2", "G4")
CA_CH_Volcano <- Volcano_plot(d, "G3", "G4")
Spon_PMA_Volcano <- Volcano_plot(d, "G1", "G2")
# head(Spon_CH_Volcano)
library(edgeR)
library(EnhancedVolcano)
library(ggrepel)
# Here I am renaming with G1, G2, G3, G4 to define each condition
volcano_columns <- c("Unstim_G1_1", "Unstim_G1_2", "Unstim_G1_3",
"PMA_G2_1", "PMA_G2_2", "PMA_G2_3",
"CA_G3_1", "CA_G3_2", "CA_G3_3",
"CH_G4_1", "CH_G4_2", "CH_G4_3")
# Select for the rows and rename the columns
TETs_Volcano <- TETs_selected %>%
select('Gene Symbol', starts_with("T"), -Total) %>%
na.omit()
colnames(TETs_Volcano)[2:13] <- volcano_columns
colnames(TETs_Volcano)
# Compute differential gene expression list that has log2FC and p-values.
d <- DGEList(counts = TETs_Volcano[,2:13], # selecting replicate columns
group = c(rep("G1", 3), rep("G2", 3), rep("G3", 3), rep("G4", 3)), # define the groups and how many replicates (3)
genes = TETs_Volcano[,1]) # define the genes as the first column 'Gene Symbol'
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
d <- estimateTagwiseDisp(d)
d <- estimateTrendedDisp(d)
Volcano_plot <- function(df, var1, var2) {
comparison <- exactTest(df, pair=c(var1, var2), dispersion = "tagwise")
comparison_df <- as.data.frame(comparison)
comparison_df_final <- comparison_df %>%
remove_rownames %>%
column_to_rownames(var="Gene Symbol")
return(comparison_df_final)
}
Spon_CH_Volcano <- Volcano_plot(d, "G1", "G4")
PMA_CH_Volcano <- Volcano_plot(d, "G2", "G4")
CA_CH_Volcano <- Volcano_plot(d, "G3", "G4")
Spon_PMA_Volcano <- Volcano_plot(d, "G1", "G2")
# head(Spon_CH_Volcano)
EnhancedVolcano(Spon_CH_Volcano,
lab = rownames(Spon_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
dev.off()
EnhancedVolcano(Spon_CH_Volcano,
lab = rownames(Spon_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 5.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
EnhancedVolcano(Spon_CH_Volcano,
lab = rownames(Spon_CH_Volcano),
x = 'logFC',
y = 'PValue',
title = 'Spontaneous vs. CH TETs',
# selectLab = selectLab_italics,
pCutoff = 0.05,
FCcutoff = 2,
pointSize = 2.0,
labSize = 0.0,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
colAlpha = 1,
legendLabels=c('Not sig.','Log2FC','p-value',
'p-value & Log2FC'),
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0)
